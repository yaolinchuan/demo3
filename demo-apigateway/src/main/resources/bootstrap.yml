
server:
  port: 8010
spring:
  application:
    name: apigateway
  cloud:
    loadbalancer:
      retry:
        #该参数用来开启重试机制
        enabled: true
    config:
      discovery:
        enabled: false
        service-id: CONFIGSERVER
      enabled: false
      fail-fast: true
    bus:
      refresh:
        enabled: true
      enabled: true
    stream:
      instance-index: 0
      instance-count: 1
      kafka:
        binder:
          brokers: 127.0.0.1:9092
          zk-nodes: 127.0.0.1:2181
          auto-add-partitions: true
          auto-create-topics: true
          min-partition-count: 1

eureka:
  instance:
    non-secure-port: ${server.port}
    instance-id: ${spring.application.name}:${server.port}
    health-check-url-path: /health
    status-page-url-path: /info
    lease-expiration-duration-in-seconds: 30
    lease-renewal-interval-in-seconds: 10
  client:
    service-url:
      defaultZone: http://localhost:8001/eureka/
feign:
  hystrix:
    enabled: true
#监控配置
endpoints:
  shutdown:
    enabled: true
    sensitive: false
  actuator:
    enabled: true
    sensitive: false
  autoconfig:
    enabled: true
    sensitive: false
  refresh:
    enabled: true
    sensitive: false
  health:
    enabled: true
    sensitive: false
#监控 end
hystrix:
  stream:
    queue:
      content-type: application/json
      destination: springCloudHystrixStream
  command:
    default:
      execution:
        isolation:
          thread:
            #断路器的超时时间,断路器的超时时间需要大于ribbon的超时时间，不然不会触发重试。
            timeoutInMilliseconds: 5000
ribbon:
  #ribbon请求连接的超时时间
  ConnectTimeout: 250
  #请求处理的超时时间
  ReadTimeout: 1000
  #对所有操作请求都进行重试
  OkToRetryOnAllOperations: true
  #对当前实例的重试次数
  MaxAutoRetries: 3
  #对下个实例的重试次数
  MaxAutoRetriesNextServer: 2

  retryableStatusCodes: 404,502

zuul:
  retryable: true
  ignored-services: '*'
  routes:
    oauth2server:
      sensitiveHeaders:
      path: /oauth2server/**
      stripPrefix: true
    testserver:
      sensitiveHeaders:
      path: /testserver/**
      stripPrefix: true
    oauth2resource:
      sensitiveHeaders:
      path: /oauth2resource/**
      stripPrefix: true

  filter:
    root: filter
    interval: 5
logging:
  level:
    root: info

management:
  security:
    enabled: false

security:
  basic:
    enabled: false
  oauth2:
    client:
      user-authorization-uri: http://localhost:8012/oauth/authorize
      client-id: acme
      client-secret: acmesecret
      access-token-uri: http://localhost:8012/oauth/token
    resource:
      jwt:
        keyValue: |
          -----BEGIN PUBLIC KEY-----
          MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnGp/Q5lh0P8nPL21oMMrt2RrkT9AW5jgYwLfSUnJVc9G6uR3cXRRDCjHqWU5WYwivcF180A6CWp/ireQFFBNowgc5XaA0kPpzEtgsA5YsNX7iSnUibB004iBTfU9hZ2Rbsc8cWqynT0RyN4TP1RYVSeVKvMQk4GT1r7JCEC+TNu1ELmbNwMQyzKjsfBXyIOCFU/E94ktvsTZUHF4Oq44DBylCDsS1k7/sfZC2G5EU7Oz0mhG8+Uz6MSEQHtoIi6mc8u64Rwi3Z3tscuWG2ShtsUFuNSAFNkY7LkLn+/hxLCu2bNISMaESa8dG22CIMuIeRLVcAmEWEWH5EEforTg+QIDAQAB
          -----END PUBLIC KEY-----
      id: gateway
proxy:
  auth:
    load-balanced: true
    routes:
      oauth2resource: oauth2